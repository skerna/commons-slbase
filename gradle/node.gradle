apply plugin: 'com.moowork.node'

node {
    version = "$node_version"
    npmVersion = "$npm_version"
    download = true
    nodeModulesDir = file(buildDir)
}

/*
 * Copyright (c)  2020  SKERNA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// Configures testing for JS modules

task prepareNodePackage(type: Copy) {
    from("npm") {
        include 'package.json'
        expand (project.properties + [kotlinDependency: ""])
    }
    from("npm") {
        exclude 'package.json'
    }
    into "$node.nodeModulesDir"
}

npmInstall.dependsOn prepareNodePackage

task populateNodeModules(type: Copy, dependsOn: [compileKotlinJs]) {
    from compileKotlinJs.destinationDir
    into "$node.nodeModulesDir/node_modules"

    afterEvaluate {
        configurations.jsTestRuntimeClasspath.each {
            if (it.absolutePath.endsWith(".jar")) {
                from zipTree(it.absolutePath).matching {
                    include '*.js'
                    include '*.js.map'
                }
            }
        }
    }
}

npmInstall.dependsOn populateNodeModules